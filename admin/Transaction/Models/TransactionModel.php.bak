<?php

namespace App\Models;

use CodeIgniter\Model;

class TransactionModel extends Model
{
    protected $table = 'soe_transactions';
    protected $primaryKey = 'id';
    protected $useAutoIncrement = true;

    protected $allowedFields = [
        'year', 'block_id', 'district_id', 'agency_type_id', 'month', 'transaction_type', 'status', 'user_id'
    ];

    protected $useTimestamps = true;
    protected $createdField = 'created_at';
    protected $updatedField = 'updated_at';

    protected $validationRules = [
        'year' => 'required|integer',
        'block_id' => 'integer',
        'district_id' => 'integer',
        'agency_type_id' => 'integer',
        'month' => 'required|integer',
        'transaction_type' => 'required|in_list[expense,fund_receipt]',
        'status' => 'integer',
        'user_id' => 'integer'
    ];

    protected $validationMessages = [
        'year' => [
            'required' => 'The year field is required.',
            'integer' => 'The year must be an integer.'
        ],
        'block_id' => [
            'integer' => 'The block ID must be an integer.'
        ],
        'district_id' => [
            'integer' => 'The district ID must be an integer.'
        ],
        'agency_type_id' => [
            'integer' => 'The agency type ID must be an integer.'
        ],
        'month' => [
            'required' => 'The month field is required.',
            'integer' => 'The month must be an integer.'
        ],
        'transaction_type' => [
            'required' => 'The transaction type field is required.',
            'in_list' => 'The transaction type must be either "expense" or "fund_receipt".'
        ],
        'status' => [
            'integer' => 'The status must be an integer.'
        ],
        'user_id' => [
            'integer' => 'The user ID must be an integer.'
        ]
    ];

    public function getAll($filter = [])
    {
        // Moved the validation to a separate function
        if (!$this->validateFilter($filter)) {
            return [];
        }

        // Changed the query to use the query builder's `where` method for filtering
        $queryBuilder = $this->db->table($this->table);
        $queryBuilder->select('t.id, d.name district, b.name block, m.name month, y.name year, t.date_added, t.transaction_type, t.status');
        $queryBuilder->select('SUM(COALESCE(tc.physical, 0)) phy, SUM(COALESCE(tc.financial, 0)) fin');
        $queryBuilder->join('soe_transaction_components tc', 't.id = tc.transaction_id', 'left');
        $queryBuilder->join('soe_years y', 'y.id = t.year', 'left');
        $queryBuilder->join('soe_blocks b', 'b.id = t.block_id', 'left');
        $queryBuilder->join('soe_districts d', 'd.id = t.district_id', 'left');
        $queryBuilder->join('soe_months m', 'm.id = t.month', 'left');
        $queryBuilder->where('t.deleted_at IS NULL');
        $queryBuilder->where('tc.deleted_at IS NULL');

        if (isset($filter['transaction_type'])) {
            $queryBuilder->where('t.transaction_type', $filter['transaction_type']);
        }

        if (isset($filter['filter_search'])) {
            $queryBuilder->where('c.name LIKE %' . $filter['filter_search'] . '% OR y.name LIKE %' . $filter['filter_search'] . '%');
        }

        if (isset($filter['agency_type_id'])) {
            $queryBuilder->where('t.agency_type_id', $filter['agency_type_id']);
        }

        if (isset($filter['district_id'])) {
            $queryBuilder->where('t.district_id', $filter['district_id']);
        }

        if (isset($filter['user_id'])) {
            $queryBuilder->where('t.user_id', $filter['user_id']);
        }

        $queryBuilder->groupBy('t.id');
        $queryBuilder->orderBy($filter['sort'] ?? 't.year, t.month', $filter['order'] ?? 'desc');

        if (isset($filter['start']) && isset($filter['limit'])) {
            $queryBuilder->limit($filter['limit'], $filter['start']);
        }

        return $queryBuilder->get()->getResult();
    }

    // Added a separate function to validate the filter
    protected function validateFilter($filter)
    {
        // Add your validation logic here
        // Return false if the filter is invalid, true otherwise
    }

    public function getTotal($filter = [])
    {
        // Moved the validation to a separate function
        if (!$this->validateFilter($filter)) {
            return 0;
        }

        // Changed the query to use the query builder's `where` method for filtering
        $queryBuilder = $this->db->table($this->table);
        $queryBuilder->select('COUNT(*) total');
        $queryBuilder->join('soe_years y', 'y.id = t.year', 'left');
        $queryBuilder->join('soe_blocks b', 'b.id = t.block_id', 'left');
        $queryBuilder->join('soe_districts d', 'd.id = t.district_id', 'left');
        $queryBuilder->where('t.deleted_at IS NULL');

        if
