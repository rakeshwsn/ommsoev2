<?php

namespace Admin\Transaction\Models;

use App\Traits\ModelTrait;
use CodeIgniter\Model;
use App\Models\TransactionModel;
use App\Models\MisctransactionModel;

class ClosingbalanceModel extends Model
{
    use ModelTrait;

    protected $DBGroup              = 'default';
    protected $table                = 'soe_closing_balances';
    protected $primaryKey           = 'id';
    protected $useAutoIncrement     = true;
    protected $returnType           = 'object';
    protected $useSoftDeletes        = true;
    protected $protectFields        = false;
    protected $allowedFields        = [
        'block_id', 'user_id', 'district_id', 'agency_type_id', 'year', 'month', 'advance', 'bank', 'cash', 'created_at', 'updated_at', 'deleted_at', 'status', 'remarks'
    ];

    // Dates
    protected $useTimestamps        = true;
    protected $dateFormat           = 'datetime';
    protected $createdField         = 'created_at';
    protected $updatedField         = '';
    protected $deletedField         = 'deleted_at';

    // Validation
    protected $validationRules      = [];
    protected $validationMessages   = [];
    protected $skipValidation       = false;
    protected $cleanValidationRules = true;

    // Callbacks
    protected $allowCallbacks       = true;
    protected $beforeInsert         = [];
    protected $afterInsert          = [];
    protected $beforeUpdate         = [];
    protected $afterUpdate          = [];
    protected $beforeFind           = [];
    protected $afterFind            = [];
    protected $beforeDelete         = [];
    protected $afterDelete          = [];

    private $transactionModel;
    private $miscTransactionModel;

    public function __construct()
    {
        parent::__construct();
        $this->init();
        $this->transactionModel = new TransactionModel();
        $this->miscTransactionModel = new MisctransactionModel();
    }

    public function getOpeningBalance(array $filter)
    {
        $this->select('advance + bank + cash as total', false);
        $where = [];

        foreach ($filter as $key => $value) {
            if (!empty($value)) {
                $where[$key] = $value;
            }
        }

        $this->orderBy('id', 'asc');
        $this->where($where);

        $total = $this->first()->total;

        return $total;
    }

    public function getClosingBalance(array $filter)
    {
        $ob = $this->getOpeningBalance(['user_id' => $filter['user_id']]);

        $upto = [
            'month' => $filter['month'],
            'year' => $filter['year'],
            'agency_type_id' => $filter['agency_type_id'],
        ];

        foreach ($filter as $key => $value) {
            if (!is_array($value) && !in_array($key, ['month', 'year', 'agency_type_id'])) {
                $upto[$key] = $value;
            }
        }

        $mon_fr = $this->transactionModel->getTotalAmount(['transaction_type' => 'fund_receipt', 'upto' => $upto]);
        $mon_exp = $this->transactionModel->getTotalAmount(['transaction_type' => 'expense', 'upto' => $upto]);
        $misc_rec = $this->miscTransactionModel->getTotalAmount($upto);

        $cb = $ob + $mon_fr->fin + $misc_rec - $mon_exp->fin;

        return $cb;
    }

    public function getLedgerReport($filter = [], $return_type = 'object')
    {
        $block_id = $filter['block_id'];
        $year = $filter['year'];
        $agency_type_id = $filter['agency_type_id'];

        $sql = "CALL proc_get_ledger_statement($block_id,$year,$agency_type_id)";

        if ($return_type == 'array') {
            $func = 'getResultArray';
        } else {
            $func = 'getResult';
        }

        return $this->db->query($sql)->$func();
    }

    public function getTransactionDetail($id)
    {
        $result = $this->db
            ->table('soe_closing_balances t')
            ->select('u.firstname, c.name block, d.name district, ut.name agency_type, y.name year, month, t.created_at, t.status, t.agency_type_id, t.remarks')
            ->join('soe_blocks c', 'c.id=t.block_id', 'LEFT')
            ->join('soe_districts d', 'd.id=t.district_id', 'LEFT')
            ->join('soe_agency_types ut', 'ut.id=t.agency_type_id', 'LEFT')
            ->join('soe_years y', 'y.id=t.year', 'LEFT')
            ->join('users u', 'u.id=t.user_id', 'LEFT')
            ->where('t.id', $id)->get()->getRow();

        return $result;
    }
}
